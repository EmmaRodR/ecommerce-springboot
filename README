#üõí E-commerce API - Backend

Un proyecto backend para una aplicaci√≥n de ecommerce, desarrollado en **Spring Boot** y **Java**. Este API ofrece gesti√≥n completa de usuarios, productos, categor√≠as, y pedidos, con una seguridad robusta mediante **JWT**. El proyecto incluye usuarios de prueba, est√° documentado con Swagger para facilitar la integraci√≥n y prueba de endpoints, y utiliza una base de datos **PostgreSQL** alojada en Render.

---

## üìö Resumen del Proyecto

- **CRUD Completo**: Gesti√≥n de productos, categor√≠as, usuarios y pedidos.
- **Autenticaci√≥n Segura**: Implementada con JWT para manejar roles de administrador y cliente.
- **Carrito y √ìrdenes**: Carrito de compras y generaci√≥n de √≥rdenes de compra.
- **Documentaci√≥n Swagger**: Explora la API con Swagger en tiempo real.
- **Usuarios de Prueba**: Usuarios predeterminados (Admin e Invitado) para pruebas r√°pidas.

---

## üõ†Ô∏è Tecnolog√≠as y Herramientas Utilizadas

- **Java 17**: Lenguaje de programaci√≥n.
- **Spring Boot 3**: Framework principal.
- **Spring Data JPA**: Abstracci√≥n para la persistencia de datos usando Hibernate como ORM.
- **Spring Security**: Manejo de seguridad.
- **JWT**: Autenticaci√≥n basada en tokens.
- **Hibernate**: ORM para gestionar la persistencia de datos.
- **Swagger**: Generaci√≥n de documentaci√≥n de la API.
- **PostgreSQL**: Base de datos alojada en Render.
- **Maven**: Construcci√≥n y gesti√≥n de dependencias.

---

## üë• Usuarios de Prueba

Para probar r√°pidamente, se incluyen dos usuarios preconfigurados:

- **Administrador**:
  - Usuario: `Admin`
  - Contrase√±a: `ADMIN12345`
  - Rol: `ADMIN`

- **Invitado**:
  - Usuario: `Invitado`
  - Contrase√±a: `Invitado123`
  - Rol: `CLIENTE`

---

## üìã Endpoints Principales

### Autenticaci√≥n y Usuarios
- `POST /api/auth/register`: Registro de nuevos usuarios.
- `POST /api/auth/login`: Autenticaci√≥n y generaci√≥n de JWT.
- `GET /api/users/{id}`: Obtiene informaci√≥n del usuario.

### Productos y Categor√≠as
- `GET /api/products`: Lista de productos.
- `POST /api/products`: Crea un producto (Administrador).
- `PUT /api/products/{id}`: Actualiza un producto.
- `DELETE /api/products/{id}`: Elimina un producto (Administrador).
- `GET /api/categories`: Lista de categor√≠as.

### Carrito y √ìrdenes
- `POST /api/cart`: A√±adir productos al carrito.
- `GET /api/cart`: Ver contenido del carrito.
- `POST /api/orders`: Crear orden de compra a partir del carrito.

### Gesti√≥n de √ìrdenes
- `GET /api/orders`: Listado de todas las √≥rdenes.
- `GET /api/orders/{id}`: Detalle de una orden espec√≠fica.
- `PUT /api/orders/{id}`: Actualiza el estado de una orden.
- `DELETE /api/orders/{id}`: Elimina una orden (Administrador).

---

## üîí Seguridad

La seguridad se maneja con **Spring Security** y **JWT**. Cada usuario autenticado recibe un token JWT para autorizarse en endpoints protegidos:

```http
Authorization: Bearer <token_jwt>
